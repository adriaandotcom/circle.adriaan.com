generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NodeType {
  company
  person
  group
}

// Media related enums
enum MediaKind {
  image
  video
  audio
  document
  other
}

enum StorageProvider {
  database
}

enum AddedBy {
  user
  system
}

model Node {
  id            String    @id @default(cuid())
  label         String
  type          NodeType?
  colorHexLight String?
  colorHexDark  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  linksA Link[]  @relation("A")
  linksB Link[]  @relation("B")
  events Event[]

  imageMediaId String?
  image        Media?  @relation(fields: [imageMediaId], references: [id], onDelete: SetNull)

  @@unique([label, type])
}

model Link {
  id        String   @id @default(cuid())
  nodeAId   String
  nodeBId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
  nodeA Node   @relation("A", fields: [nodeAId], references: [id], onDelete: Cascade)
  nodeB Node   @relation("B", fields: [nodeBId], references: [id], onDelete: Cascade)

  @@unique([nodeAId, nodeBId])
  @@index([nodeAId])
  @@index([nodeBId])
}

model Role {
  id   String @id @default(cuid())
  slug String
  name String

  links Link[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug])
}

model Event {
  id          String   @id @default(cuid())
  nodeId      String
  type        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  node        Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  media EventMedia[]

  @@index([nodeId, createdAt])
}

model Media {
  id          String          @id @default(cuid())
  kind        MediaKind?
  mimeType    String
  byteSize    Int
  sha256      String          @unique
  imageWidth  Int?
  imageHeight Int?
  provider    StorageProvider @default(database)
  addedBy     AddedBy         @default(user)
  data        Bytes
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  events     EventMedia[]
  nodeImages Node[]
}

model EventMedia {
  id        String   @id @default(cuid())
  eventId   String
  mediaId   String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([eventId, mediaId])
  @@index([eventId])
  @@index([mediaId])
}
